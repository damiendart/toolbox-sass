// An assortment of Sass functions, mixins, and variables.
//
// I'm publishing this project online mainly for my own benefit; I got
// tired of having to maintain copies of the same bits-and-pieces across
// multiple projects.
//
// I don't recommend using this for your own projects as-is. I've done a
// bunch of customising that you'll probably need to change or undo for
// your projects. I'm also prone to making drastic changes on a whim.
//
// Having said that, feel free to have a browse and pinch stuff for your
// own projects. If you're unfortunate enough to be working on a project
// that uses this, use a recent version of Sass that supports
// namespacing stuff with the "@use" rule to prevent any issues with
// other frameworks and libraries.
//
// Copyright (C) 2019 Damien Dart, <damiendart@pobox.com>.
// This file is distributed under the MIT licence. For more information,
// please refer to the accompanying "LICENCE" file.


// The following media-query-related variables are inspired by
// Foundation 5. For more information, please see
// <https://foundation.zurb.com/sites/docs/v/5.5.3/media-queries.html>.

$base-one-em: 16px;
$base-one-pixel: (1px / $base-one-em) * 1em;

$breakpoint-x-small: (320px / $base-one-em) * 1em;
$breakpoint-small: (480px / $base-one-em) * 1em;
$breakpoint-medium: (768px / $base-one-em) * 1em;
$breakpoint-large: (1024px / $base-one-em) * 1em;
$breakpoint-x-large: (1440px / $base-one-em) * 1em;

$media-screen: "only screen";

$media-x-small: "#{$media-screen}";
$media-small: "#{$media-screen} and (min-width: #{$breakpoint-x-small + $base-one-pixel})";
$media-medium: "#{$media-screen} and (min-width: #{$breakpoint-small + $base-one-pixel})";
$media-large: "#{$media-screen} and (min-width: #{$breakpoint-medium + $base-one-pixel})";
$media-x-large: "#{$media-screen} and (min-width: #{$breakpoint-large + $base-one-pixel})";

$media-x-small-down: "#{$media-screen} and (max-width: #{$breakpoint-x-small})";
$media-small-down: "#{$media-screen} and (max-width: #{$breakpoint-small})";
$media-medium-down: "#{$media-screen} and (max-width: #{$breakpoint-medium})";
$media-large-down: "#{$media-screen} and (max-width: #{$breakpoint-large})";
$media-x-large-down: "#{$media-screen} and (max-width: #{$breakpoint-x-large})";

// This is a gross hack for targeting Internet Explorer 10 and 11. For
// more information, see <https://stackoverflow.com/a/20541859>.
$media-ie-10: "all and (-ms-high-contrast: none), (-ms-high-contrast: active)";

// The following system font stack is based on one used in WordPress'
// admin interface. For more information, see
// <https://make.wordpress.org/core/2016/07/07/native-fonts-in-4-6/>.
$font-stack-system: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
  Oxygen-Sans, Cantarell, "Helvetica Neue", Helvetica, Arial, sans-serif;


// Returns a colour (currently black or white) that contrasts well
// against the provided color. For more information, please see:
//  - <https://webaim.org/resources/contrastchecker/> and
//  - <https://css-tricks.com/css-variables-calc-rgb-enforcing-high-contrast-colors/>.
@function contrasting-colour($colour) {
  $sum: (red($colour) * 299) + (green($colour) * 587) + (blue($colour) * 144);
  @if $sum > 128000 {
    @return #000000; }
  @return #ffffff; }

// Returns the square root of the provided number using Newton's Method.
// For more information, please see:
// - <http://www.antimath.info/css/sass-sqrt-function/>,
// - <https://en.wikipedia.org/wiki/Newton%27s_method>, and
// - <https://css-tricks.com/snippets/sass/strip-unit-function/>.
@function sqrt($number) {
  $x: 1;
  @if type-of($number) == "number" and not unitless($number) {
    $number: $number / ($number * 0 + 1); }
  @for $i from 1 through 10 {
    $x: $x - ($x * $x - abs($number)) / (2 * $x); }
  @return $x; }


// Adds some bits-and-pieces to the "<body>" and "<html>" HTML elements
// to create a reasonable (to me, at least) starting point and to have
// the media-query-related variables above function as intended.
@mixin body-html-base(
  $font-stack,
  $background,
  $foreground,
  $initial-content-width,
  $font-size: $base-one-em,
  $line-height: 1.5rem
) {
  body {
    @include nice-font-rendering;
    background: $background;
    color: $foreground;
    font-family: $font-stack;
    line-height: $line-height;
    margin: 0;
    text-size-adjust: none;
    & > *:not(div):not(footer):not(header):not(main) {
      margin-left: auto;
      margin-right: auto;
      max-width: $initial-content-width;
      padding-left: $line-height;
      padding-right: $line-height;
      @media #{$media-large} {
        padding-left: $line-height * 2;
        padding-right: $line-height * 2; } } }
  html {
    // TODO: Handle instances when font size specified is below 16px.
    @if($font-size == 16px) {
      font-size: 87.5%;
    } @else {
      font-size: 100%; }
    @media #{$media-medium} {
      font-size: percentage($font-size / 16px); } } }

// Yet Another Clearfix Mixin.
@mixin clearfix {
  zoom: 1;
  &:after {
    clear: both; }
  &:before, &:after {
    content: "";
    display: table; } }

// Corrects inability to style clickable types in iOS and Safari. For
// more information, see <https://github.com/necolas/normalize.css>.
@mixin clickable-reset {
  -webkit-appearance: button;
  border-radius: 0; }

// Adds stuff to create a hamburger-menu icon. The following is based on
// <https://jonsuh.com/hamburgers/>.
@mixin hamburger($width, $layer-height, $spacing-height) {
  $height: $layer-height * 3 + $spacing-height * 2;
  display: inline-block;
  height: $height;
  position: relative;
  width: $width;
  &__filling {
    margin: $layer-height / -2 0 0 0;
    top: 50%;
    &:after {
      bottom: ($spacing-height + $layer-height) * -1;
      content: ""; }
    &:before {
      content: "";
      top: ($spacing-height + $layer-height) * -1; }
    &, &:after, &:before {
      background: currentColor;
      border-radius: $layer-height;
      display: block;
      height: $layer-height;
      position: absolute;
      width: 100%; } }
  &--active {
    .hamburger__filling {
      transform: rotate(-45deg);
      &:after {
        transform: translate3d(0, ($spacing-height + $layer-height) * -1, 0) rotate(-90deg); }
      &:before {
        opacity: 0;
        transform: translate3d(0, $spacing-height + $layer-height, 0) rotate(45deg); } } } }

// Adds declarations to improve font rendering in most browsers. This
// mixin may no longer be necessary for modern browsers (I should check
// at some point). The following is based on
// <https://gist.github.com/hsleonis/55712b0eafc9b25f1944>.
@mixin nice-font-rendering {
  font-smoothing: antialiased;
  -webkit-font-smoothing: antialiased; // Autoprefixer omits this.
  -moz-osx-font-smoothing: grayscale;
  text-rendering: optimizeLegibility;
  // Webkit on iOS devices (at least the ones I've tried) require the
  // "-webkit-" prefix here despite Autoprefixer thinking otherwise.
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%; // Just In Case(tm).
  text-size-adjust: none; }
