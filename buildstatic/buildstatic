#!/usr/bin/env node
// Copyright (C) 2020 Damien Dart, <damiendart@pobox.com>.
// This file is distributed under the MIT licence. For more information,
// please refer to the accompanying "LICENCE" file.

/* eslint no-console: 0 global-require: 0 */
/* eslint-env node */

const fse = require('fs-extra');
const glob = require('util').promisify(require('glob'));
const path = require('path');
const NoOpProcessor = require('./processors/NoOpProcessor');
const processors = [
  require('./processors/JavaScriptProcessor'),
  require('./processors/MarkdownProcessor'),
  NoOpProcessor,
  require('./processors/SassProcessor'),
  require('./processors/SVGProcessor'),
  require('./processors/TwigProcessor'),
];

if (
  process.argv.length !== 4
  || process.argv.includes('--help')
  || process.argv.includes('-h')
) {
  const askingForHelp = process.argv.includes('--help')
    || process.argv.includes('-h');

  (askingForHelp ? console.log : console.error)(
    `"${path.basename(process.argv[1])}" is a real basic static site generator.
    Usage: ${path.basename(process.argv[1])} INPUT-DIRECTORY OUTPUT-DIRECTORY`
      .trim().replace(/\n {4}/g, '\n'),
  );
  process.exit(askingForHelp ? 0 : 1);
}

const configurationOptions = { contextModifier: (context) => context };
const inputBaseDirectoryPath = path.resolve(process.argv[2]);
const outputBaseDirectoryPath = path.resolve(process.argv[3]);
let writtenFileCount = 0;

try {
  Object.assign(
    configurationOptions,
    // eslint-disable-next-line import/no-dynamic-require
    require(`${inputBaseDirectoryPath}/.buildstatic.conf`),
  );
} catch (e) {
  if (e.code === 'MODULE_NOT_FOUND') {
    console.error('[!] No ".buildstatic.conf.js" found in input directory');
  } else {
    console.error(
      `[✘] Unable to process "${inputBaseDirectoryPath}/.buildconfig.conf.js!`,
    );
    console.error(`\n${e.toString()}`);
    process.exit(1);
  }
}

glob('**/*', { cwd: inputBaseDirectoryPath, nodir: true })
  .then((files) => files.map((file) => {
    const applicableProcessors = processors.filter(
      (processor) => processor.INPUT_EXTENSION === path.extname(file),
    );
    const inputFilePath = path.join(inputBaseDirectoryPath, file);

    if (applicableProcessors.length === 0) {
      applicableProcessors.push(NoOpProcessor);
    }

    return applicableProcessors.map((processor) => {
      const outputFilePath = path.join(outputBaseDirectoryPath, file)
        .replace(processor.INPUT_EXTENSION, processor.OUTPUT_EXTENSION);

      return {
        context: configurationOptions.contextModifier(
          {
            inputFilePath,
            inputBaseDirectoryPath,
            outputFilePath,
            outputBaseDirectoryPath,
          },
        ),
        processor,
      };
    });
  }))
  .then((items) => items.flat())
  .then((items) => Promise.all(
    items.map((item) => {
      let action;

      if (item.processor.name === 'NoOpProcessor') {
        action = fse.copy(
          item.context.inputFilePath,
          item.context.outputFilePath,
        );
      } else {
        action = fse.mkdirs(path.dirname(item.context.outputFilePath))
          .then(() => fse.readFile(item.context.inputFilePath, 'utf8'))
          .then((contents) => item.processor.process(contents, item.context))
          .then((output) => fse.writeFile(
            item.context.outputFilePath,
            output,
          ));
      }

      return action
        .then(() => {
          console.log(`[✔] Written "${item.context.outputFilePath}"`);
          writtenFileCount += 1;
        })
        .catch((e) => {
          console.error(
            `[✘] Unable to write "${item.context.outputFilePath}"`,
          );
          console.error(`\n${e.toString()}`);
          process.exit(1);
        });
    }),
  ))
  .then(() => {
    console.log(`\n${writtenFileCount} file(s) written!`);
  })
  .catch((e) => {
    console.error('[✘] An error has occurred!');
    console.error(`\n${e.toString()}`);
    process.exit(1);
  });
